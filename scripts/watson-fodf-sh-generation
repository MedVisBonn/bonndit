#!/usr/bin/python
import logging
import os
import argparse
import numpy as np
import nrrd
from bonndit.utils.watson_utils import fodf_to_watson_sh
from bonndit.utils.fields import save_tensor
from bonndit.utils import dwmri

def main():
    parser = argparse.ArgumentParser(
        description='This script creates the sh fodf data needed for the fodf interpolation watson tracking.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--i', help='Inputfolder should contain: \n'
                                    '   - fodf.nrrd \n'
                                    '       4D input file containing fODFs in masked higher-order tensor format (1+#fODF coefficients,x,y,z) \n '
                                    '       If the file is named differently, use the --infile argument \n',
                        default=argparse.SUPPRESS)
    parser.add_argument('--infile',
                        help='4D input file containing fODFs in masked higher-order tensor format (1+#fODF coefficients,x,y,z)', default=argparse.SUPPRESS)
    parser.add_argument('-m', '--metadata',
                        help='data.nii.gz corresponding to fodf', default=argparse.SUPPRESS)
    parser.add_argument('-o', '--outfile',
                        help='4D output file containing fODFs in masked higher-order tensor format (#fodf coefficients,x,y,z).', default=argparse.SUPPRESS)
    parser.add_argument('-v', '--verbose', default=True)
    args = parser.parse_args()
    print(args)


    logging.basicConfig(filename=os.path.join("./", 'watson_fitting.log'),
                        format='%(asctime)s %(levelname)-8s %(message)s',
                        datefmt='%y-%m-%d %H:%M',
                        level=logging.INFO,
                        filemode='w')

    if args.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.DEBUG)
        # set a format which is simpler for console use
        formatter = logging.Formatter(
        	'%(asctime)s: %(levelname)-8s %(message)s', datefmt='%y-%m-%d %H:%M')
        # tell the handler to use this format
        console.setFormatter(formatter)
        # add the handler to the root logger
        logging.getLogger('').addHandler(console)

    if 'i' not in args:
        fodf_file = args.infile
    else:
        fodf_file = os.path.join(args.i, 'fodf.nrrd')
    fodf_data, _ = nrrd.read(fodf_file)

    shorder = int(0.5*(np.sqrt(1 + 8*(fodf_data.shape[0]-1))-3))

    logging.info("Converting fODF")
    fodf_sh = fodf_to_watson_sh(fodf_data, shorder)

    # create mask from ones and zeros of fodf
    fodf_mask = np.moveaxis(fodf_data, 0, -1)[:,:,:,0].astype(bool)

    # load meta for vvi
    _, _, meta = dwmri.load(args.metadata)

    logging.info(f"Saving fODF-SH to {args.outfile}")
    save_tensor(args.outfile, fodf_sh, mask=fodf_mask, meta=meta)
    
if __name__=="__main__":
    main()
