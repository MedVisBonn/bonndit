#!/usr/bin/python
import logging
import os
import argparse
import numpy as np
import nrrd
from bonndit.directions.watsonfit import WatsonFit

def main():
    parser = argparse.ArgumentParser(
        description='This script performs a fitting of Watson distributions to fODFs '
                    'that are given in a higher-order tensor format.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--i', help='Inputfolder should contain: \n'
                                    '   - fodf.nrrd \n'
                                    '       4D input file containing fODFs in masked higher-order tensor format (1+#fODF coefficients,x,y,z) \n '
                                    '       If the file is named differently, use the --infile argument \n'
                                    '   - wmvolume.nrrd \n'
                                    '       The white matter mask. \n'
                                    '       If the file is named differently, use the --wmvolume argument \n',
                        default=argparse.SUPPRESS)
    parser.add_argument('--infile',
                        help='4D input file containing fODFs in masked higher-order tensor format (1+#fODF coefficients,x,y,z)', default=argparse.SUPPRESS)
    parser.add_argument('--wmvolume', help='White matter mask.', default=argparse.SUPPRESS)
    parser.add_argument('-o', '--outfile',
                        help='5D output file with the approximation result (5,r,x,y,z), the first axis contains in place 0 '
                        'the kappa value, in place 1 the volume fraction and in the remaining places the unit direction.', default=argparse.SUPPRESS)
    parser.add_argument('-op', '--outfilepeaks',
                        help='5D output file with the approximation result without kappa (4,r,x,y,z), the first axis contains in place 0 '
                        'the volume fraction and in the remaining places the unit direction.', default=argparse.SUPPRESS)
    parser.add_argument('-ob', '--outfilebackup',
                        help='Backup file with data to later generate any of the supported outputs.', default=argparse.SUPPRESS)
    parser.add_argument('-of', '--outfilefodf',
                        help='If filename is set, Watson parameters are used to generate fodf data', default=argparse.SUPPRESS)
    parser.add_argument('-ofn', '--outfilefodfpeaknumber',
                        help='Only export one distribution per voxel, 0 for principal direction, 1 and 2 for 2nd and 3rd.', default=None)
    parser.add_argument('-vvi', '--vvicones',
                        help='If filename is set, r files are generated beginning with the given filename that contain data to visualize as cones with vvi.', default=argparse.SUPPRESS)
    parser.add_argument('-r', help='rank', default=3)
    parser.add_argument('--init', help='How the fitting should be initialized, defaults to \'lowrank\' for the lowrank '
                                        'fit by Schultz and Seidel, 2008. Alternative \'rand\' for random init or \'given\' for given values.', default='lowrank')
    parser.add_argument('--initfile', help='Precomputed values e.g. from lowrank fit as 5D file (4,r,x,y,z), used if init argument is set to \'given\'.', default=argparse.SUPPRESS)
    parser.add_argument('--kapparange', help='Range of initial kappa values to randomly sample from.', default='39.9,40')
    parser.add_argument('--wmmin', help='Minimum WM density to compute watson fitting', default=0.3)
    parser.add_argument('--nospread', help='If added, the fitting only fits the lowrank tensors without added Watson spread.', action='store_true')
    parser.add_argument('--nooutliers', help='If added, the fitting does not check for outliers.', action='store_true')
    parser.add_argument('-v', '--verbose', default=True)
    args = parser.parse_args()
    print(args)


    logging.basicConfig(filename=os.path.join("./", 'watson_fitting.log'),
                        format='%(asctime)s %(levelname)-8s %(message)s',
                        datefmt='%y-%m-%d %H:%M',
                        level=logging.INFO,
                        filemode='w')

    if args.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.DEBUG)
        # set a format which is simpler for console use
        formatter = logging.Formatter(
        	'%(asctime)s: %(levelname)-8s %(message)s', datefmt='%y-%m-%d %H:%M')
        # tell the handler to use this format
        console.setFormatter(formatter)
        # add the handler to the root logger
        logging.getLogger('').addHandler(console)

    # load params
    kappa_range = tuple(np.array(args.kapparange.split(',')).astype(float))
    initvals = None
    if 'initfile' in args:
        initvals, _ = nrrd.read(args.initfile)
    
    # load fODFs and wmvolume
    wm_file = None
    if 'i' not in args:
        fodf_file = args.infile
        if 'wmvolume' in args:
            wm_file = args.wmvolume
    else:
        fodf_file = os.path.join(args.i, 'fodf.nrrd')
        wm_file = os.path.join(args.i, 'wmvolume.nrrd')
    fodf_data, fodf_header = nrrd.read(fodf_file)
    wm_data = None
    if wm_file is not None and os.path.exists(wm_file):
        wm_data, _ = nrrd.read(wm_file)
    
    # compute sh order
    shorder = int(0.5*(np.sqrt(1 + 8*(fodf_data.shape[0]-1))-3))
    logging.info(f"SH Order: {shorder}")

    watsonfit = WatsonFit(shorder=shorder, init=args.init, kappa_range=kappa_range, rank=int(args.r), wmmin=int(args.wmmin), no_spread = args.nospread, verbose=args.verbose)
    result_model = watsonfit.fit(fodf_data, fodf_header, wm_data, initvals = initvals, outlier_handling=not args.nooutliers)

    if 'outfilebackup' in args:
        logging.info(f"Saving backup to {args.outfilebackup}")
        result_model.backup_to_file(args.outfilebackup)
    
    if 'outfile' in args:
        logging.info(f"Saving Watson output to {args.outfile}")
        result_model.export_for_watson_tracking(args.outfile)

    if 'outfilepeaks' in args:
        logging.info(f"Saving Peak output to {args.outfilepeaks}")
        result_model.export_for_peak_tracking(args.outfilepeaks)

    if 'vvicones' in args:
        logging.info(f"Saving vvi cones")
        result_model.export_for_vvi_with_cones(args.vvicones)
    
    if 'outfilefodf' in args:
        logging.info(f"Saving fodf output to {args.outfilefodf}")
        if 'outfilefodfpeaknumber' in args:
            result_model.export_as_fodf_signal(args.outfilefodf, peak_number=int(args.outfilefodfpeaknumber))
        else:
            result_model.export_as_fodf_signal(args.outfilefodf)

if __name__=="__main__":
    main()
