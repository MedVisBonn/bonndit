#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
from bonndit.tracking.tracking_prob import tracking_all
import argparse
import nrrd
import os
import numpy as np
from plyfile import PlyElement, PlyData

path_tree = []


def main():
	parser = argparse.ArgumentParser(
		description='This script performs tracking along a multi vector field as described in '
					'Reducing Model Uncertainty in Crossing Fiber Tractography, Gruen et al. (2021)',
		formatter_class=argparse.ArgumentDefaultsHelpFormatter)

	parser.add_argument('-i', help='5D (4,3,x,y,z) Multivectorfield, where the first dimension gives the length '
								   'and the direction of the vector, the second dimension denots different directions',
						required=True, default=argparse.SUPPRESS)

	parser.add_argument('-wm', help='WM Mask', required=True, default=argparse.SUPPRESS)
	parser.add_argument('-wmmin', help='Minimum WM density befor tracking stops', default=0.15)
	parser.add_argument('-s', help='Seedspointfile: Each row denots a seedpoint 3 columns an initial direction can '
								   'also be given as 3 additional columns. Columns should be seperated by whitespace.',  required=True, default=argparse.SUPPRESS)
	parser.add_argument('-sw', help='Stepwidth for Eulerintegration', default=0.9)
	parser.add_argument('-o', help='Outfile is in ply format.', required=True, default=argparse.SUPPRESS)
	parser.add_argument('-mtlength', help='Maximum track steps.', default=300)
	parser.add_argument('-samples', help='Samples per seed.', default=1)
	parser.add_argument('-var', help='Variance for probabilistic direction selection..', default=1)
	parser.add_argument('-exp', help='Expectation for probabilistic direction selection.', default=0)
	parser.add_argument('-interpolation', '--interpolation',
						help='decide between FACT interpolation and Trilinear interpolation.',
						default='Trilinear')
	parser.add_argument('-integration', '--integration', help='Decide between Euler integration and Euler integration. '
															  , default='Euler')
	parser.add_argument('-prob', '--prob', help='Decide between Laplacian and Gaussian. '
												, default='Gaussian')
	parser.add_argument('-v', '--verbose', default=True)
	args = parser.parse_args()

	logging.basicConfig(filename=os.path.join("./", 'prob-tracking.log'),
						format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
						datefmt='%y-%m-%d %H:%M',
						level=logging.INFO,
						filemode='w')

	if args.verbose:
		# define a Handler which writes INFO messages or higher to the sys.stderr
		console = logging.StreamHandler()
		console.setLevel(logging.INFO)
		# set a format which is simpler for console use
		formatter = logging.Formatter(
			'%(name)-12s: %(levelname)-8s %(message)s')
		# tell the handler to use this format
		console.setFormatter(formatter)
		# add the handler to the root logger
		logging.getLogger('').addHandler(console)

	# Open files and do various error checking
	vector_field, _ = nrrd.read(args.i)
	if vector_field.shape[0] != 4:
		logging.error("Wrong dimension on first axis. Has to contain 4 values.")
		raise Exception()
	if vector_field.shape[1] != 3:
		logging.error("Wrong dimension on second axis. Has to contain 3 values.")
		raise Exception()
	if len(vector_field.shape) != 5:
		logging.error("The input multivector field has to have 5 dimensions.")
		raise Exception()

	logging.info("Multivectorfield loaded")

	wm_mask, meta = nrrd.read(args.wm)
	if vector_field.shape[2:] != wm_mask.shape:
		logging.error("Vectorfield (x,y,z) and wm mask have to have same dimensions.")
		raise Exception()
	logging.info("WM Mask loaded")

	seeds = open(args.s)
	seeds = [list(map(float, point.split())) for point in seeds]
	if [1 for seed in seeds if len(seed) not in [3, 6]]:
		logging.error("The seedfile is corrupted. Has to have ether 3 or 6 entries per row.")
		raise Exception()
	seeds = np.float64(seeds)
	logging.info("Seedfile loaded")
	logging.info("Start fiber tracking")
	paths, paths_len = tracking_all(np.float64(vector_field), meta, np.float64(wm_mask), np.float64(seeds),
									args.integration,
									args.interpolation, args.prob, args.sw, float(args.var),
									int(args.samples),
									int(args.mtlength), float(args.wmmin), float(args.exp or 1), args.verbose, logging)

	paths_len = [sum(paths_len[:i + 1]) for i in range(len(paths_len))]

	tracks = PlyElement.describe(np.array(paths, dtype=[('x', 'f4'), ('y', 'f4'), ('z', 'f4'),
														('seedpoint', 'f4'), ('angle', 'f4')]), 'vertices',
								 comments=[])
	endindex = PlyElement.describe(np.array(paths_len, dtype=[('endindex', 'i4')]), 'fiber')
	PlyData([tracks, endindex]).write(args.o)
	logging.info(f"Output file has been written to {args.o}")


if __name__ == "__main__":
	main()
